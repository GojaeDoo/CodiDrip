import React from "react";
import * as S from "./FreeBoardComment.styled";
import { FreeBoardCommentPresenterProps } from "./FreeBoardComment.types";

export const FreeBoardCommentPresenter: React.FC<FreeBoardCommentPresenterProps> = (props:FreeBoardCommentPresenterProps) => {
  if (props.isLoading) {
    return (
      <S.FreeBoardCommentWrapper>
        <S.CommentHeader>
          <div>
            <h2>ÎåìÍ∏Ä</h2>
            <div className="comment-count">Î°úÎî© Ï§ë...</div>
          </div>
        </S.CommentHeader>
        <S.CommentList>
          <div style={{ textAlign: "center", padding: "2rem", color: "#666" }}>
            ÎåìÍ∏ÄÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...
          </div>
        </S.CommentList>
      </S.FreeBoardCommentWrapper>
    );
  }

  return (
    <>
      <S.FreeBoardCommentWrapper>
        <S.CommentHeader>
          <div>
            <h2>ÎåìÍ∏Ä</h2>
            <div className="comment-count">{props.comments.length}Í∞úÏùò ÎåìÍ∏Ä</div>
          </div>
          <S.AddCommentButton onClick={props.onOpenModal}>
            ÎåìÍ∏Ä ÏûëÏÑ±
          </S.AddCommentButton>
        </S.CommentHeader>

        <S.CommentList>
          {props.comments?.length === 0 ? (
            <S.EmptyState>
              <div className="empty-icon">üí¨</div>
              <p className="empty-text">ÏïÑÏßÅ ÎåìÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.<br />Ï≤´ Î≤àÏß∏ ÎåìÍ∏ÄÏùÑ ÎÇ®Í≤®Î≥¥ÏÑ∏Ïöî!</p>
            </S.EmptyState>
          ) : (
            props.comments?.map((comment) => {
              return (
                <S.CommentItem key={comment.id}>
                  <S.CommentHeaderInfo>
                    <S.UserAvatar>
                      {comment.profile_image ? (
                        <img 
                          src={`http://localhost:3005/uploads/profiles/${comment.profile_image}`} 
                          alt={comment.profile_nickname}
                          style={{ width: '100%', height: '100%', borderRadius: '50%', objectFit: 'cover' }}
                        />
                      ) : (
                        props.getInitials(comment.profile_nickname)
                      )}
                    </S.UserAvatar>
                    <S.UserInfo>
                      <p className="username">{comment.profile_nickname}</p>
                      <p className="timestamp">{props.formatTimestamp(comment.created_at)}</p>
                    </S.UserInfo>
                    <S.CommentActions>
                      {props.isLogin && props.isCommentAuthor(comment.user_id) && (
                        <button onClick={() => props.onEditComment(comment)}>ÏàòÏ†ï</button>
                      )}
                      {props.isLogin && (props.isCommentAuthor(comment.user_id) || props.isAdmin) && (
                        <button onClick={() => props.onDeleteComment(comment.id)}>ÏÇ≠Ï†ú</button>
                      )}
                      {props.isLogin && !props.isCommentAuthor(comment.user_id) && !props.isAdmin && (
                        <button onClick={() => props.onReportClick(comment.id)}>Ïã†Í≥†</button>
                      )}
                      {props.isLogin && (
                        <button onClick={() => props.onReplyComment(comment.id)}>ÎåìÍ∏Ä</button>
                      )}
                    </S.CommentActions>
                  </S.CommentHeaderInfo>
                  
                  {props.editingCommentId === comment.id ? (
                    <S.EditInputWrapper>
                      <S.CommentInput
                        value={props.editContent}
                        onChange={(e) => props.onEditContentChange(e.target.value)}
                        placeholder="ÎåìÍ∏ÄÏùÑ ÏàòÏ†ïÌïòÏÑ∏Ïöî..."
                      />
                      <S.ButtonGroup>
                        <S.SaveButton onClick={props.onSaveEdit}>Ï†ÄÏû•</S.SaveButton>
                        <S.CancelButton onClick={props.onCancelEdit}>Ï∑®ÏÜå</S.CancelButton>
                      </S.ButtonGroup>
                    </S.EditInputWrapper>
                  ) : (
                    <S.CommentContent>{comment.content}</S.CommentContent>
                  )}

                  {/* ÎåÄÎåìÍ∏Ä ÏûÖÎ†• UI */}
                  {props.replyingToCommentId === comment.id && (
                    <S.ReplyInputWrapper>
                      <S.ReplyInput
                        value={props.replyContent}
                        onChange={(e) => props.onReplyContentChange(e.target.value)}
                        placeholder="ÎåÄÎåìÍ∏ÄÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî..."
                      />
                      <S.ReplyButtonGroup>
                        <S.ReplySubmitButton 
                          onClick={props.onSubmitReply}
                          disabled={!props.replyContent.trim()}
                        >
                          ÎåìÍ∏Ä ÏûëÏÑ±
                        </S.ReplySubmitButton>
                        <S.ReplyCancelButton onClick={props.onCancelReply}>
                          Ï∑®ÏÜå
                        </S.ReplyCancelButton>
                      </S.ReplyButtonGroup>
                    </S.ReplyInputWrapper>
                  )}

                  {/* ÎåÄÎåìÍ∏Ä Î≥¥Í∏∞ Î≤ÑÌäº */}
                  {comment.reply_count !== undefined && comment.reply_count > 0 && (
                    <S.ReplyWrapper style={{ marginTop: "0.5rem" }}>
                      {props.showingRepliesFor === comment.id ? (
                        <S.ToggleReplyButton onClick={() => props.onHideReplies(comment.id)}>
                          ‚Üë ÎåìÍ∏Ä Ïà®Í∏∞Í∏∞
                        </S.ToggleReplyButton>
                      ) : (
                        <S.ToggleReplyButton onClick={() => props.onShowReplies(comment.id)}>
                          ‚Üì ÎåìÍ∏Ä ({comment.reply_count}Í∞ú)
                        </S.ToggleReplyButton>
                      )}
                    </S.ReplyWrapper>
                  )}

                  {/* ÎåÄÎåìÍ∏Ä Î™©Î°ù */}
                  {props.showingRepliesFor === comment.id && props.replies[comment.id] && props.replies[comment.id].length > 0 && (
                    <S.ReplyWrapper>
                      {props.replies[comment.id].map((reply) => (
                        <S.ReplyContainer key={reply.id}>
                          <S.ReplyHeader>
                            <S.ReplyAvatar>
                              {reply.profile_image ? (
                                <img 
                                  src={`http://localhost:3005/uploads/profiles/${reply.profile_image}`} 
                                  alt={reply.profile_nickname}
                                  style={{ width: '100%', height: '100%', borderRadius: '50%', objectFit: 'cover' }}
                                />
                              ) : (
                                props.getInitials(reply.profile_nickname)
                              )}
                            </S.ReplyAvatar>
                            <span style={{ 
                              fontWeight: "600", 
                              marginRight: "0.75rem",
                              color: "#ffffff",
                              fontSize: "14px"
                            }}>
                              {reply.profile_nickname}
                            </span>
                            <span style={{ 
                              color: "#888", 
                              fontSize: "12px",
                              fontWeight: "500"
                            }}>
                              {props.formatTimestamp(reply.created_at)}
                            </span>
                            {props.isLogin && (
                              <div style={{ marginLeft: "auto", display: "flex" }}>
                                {(props.isCommentAuthor(reply.user_id) || props.isAdmin) && (
                                  <>
                                    <S.ReplyActionButton onClick={() => props.onEditComment(reply)}>
                                      ÏàòÏ†ï
                                    </S.ReplyActionButton>
                                    <S.ReplyActionButton onClick={() => props.onDeleteComment(reply.id)}>
                                      ÏÇ≠Ï†ú
                                    </S.ReplyActionButton>
                                  </>
                                )}
                                {!props.isCommentAuthor(reply.user_id) && !props.isAdmin && (
                                  <S.ReplyActionButton onClick={() => props.onReportClick(reply.id)}>
                                    Ïã†Í≥†
                                  </S.ReplyActionButton>
                                )}
                              </div>
                            )}
                          </S.ReplyHeader>
                          
                          {props.editingCommentId === reply.id ? (
                            <S.ReplyEditWrapper>
                              <S.ReplyEditInput
                                value={props.editContent}
                                onChange={(e) => props.onEditContentChange(e.target.value)}
                                placeholder="ÎåÄÎåìÍ∏ÄÏùÑ ÏàòÏ†ïÌïòÏÑ∏Ïöî..."
                              />
                              <S.ReplyEditButtonGroup>
                                <S.ReplyEditSaveButton onClick={props.onSaveEdit}>
                                  Ï†ÄÏû•
                                </S.ReplyEditSaveButton>
                                <S.ReplyEditCancelButton onClick={props.onCancelEdit}>
                                  Ï∑®ÏÜå
                                </S.ReplyEditCancelButton>
                              </S.ReplyEditButtonGroup>
                            </S.ReplyEditWrapper>
                          ) : (
                            <div style={{ 
                              color: "#e0e0e0", 
                              lineHeight: "1.6",
                              fontSize: "14px",
                              fontFamily: "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
                            }}>
                              {reply.content}
                            </div>
                          )}
                        </S.ReplyContainer>
                      ))}
                    </S.ReplyWrapper>
                  )}

                  {/* ÎåÄÎåìÍ∏ÄÏù¥ ÏóÜÏùÑ Îïå Î©îÏãúÏßÄ */}
                  {props.showingRepliesFor === comment.id && (!props.replies[comment.id] || props.replies[comment.id].length === 0) && (
                    <S.NoReply>
                      ÏïÑÏßÅ ÎåÄÎåìÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.
                    </S.NoReply>
                  )}
                </S.CommentItem>
              );
            })
          )}
        </S.CommentList>

        {props.hasMoreComments && (
          <S.ShowMoreButton onClick={props.showAllComments ? props.onShowLessComments : props.onShowMoreComments}>
            {props.showAllComments ? "ÎåìÍ∏Ä Ï†ëÍ∏∞" : `ÎåìÍ∏Ä ÎçîÎ≥¥Í∏∞`}
          </S.ShowMoreButton>
        )}
      </S.FreeBoardCommentWrapper>

      {props.isModalOpen && (
        <S.ModalOverlay onClick={props.onCloseModal}>
          <S.ModalContent onClick={(e) => e.stopPropagation()}>
            <S.ModalHeader>
              <h3>ÎåìÍ∏Ä ÏûëÏÑ±</h3>
              <button className="close-button" onClick={props.onCloseModal}>
                √ó
              </button>
            </S.ModalHeader>
            
            <S.ModalBody>
              <S.CommentInput
                value={props.newComment}
                onChange={(e) => props.onNewCommentChange(e.target.value)}
                placeholder="ÎåìÍ∏ÄÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî..."
                onKeyPress={(e) => {
                  if (e.key === "Enter" && e.ctrlKey) {
                    props.onSubmitComment();
                  }
                }}
              />
            </S.ModalBody>
            
            <S.ModalFooter>
              <button className="cancel" onClick={props.onCloseModal}>
                Ï∑®ÏÜå
              </button>
              <button 
                className="submit" 
                onClick={props.onSubmitComment}
                disabled={!props.newComment.trim()}
              >
                ÎåìÍ∏Ä ÏûëÏÑ±
              </button>
            </S.ModalFooter>
          </S.ModalContent>
        </S.ModalOverlay>
      )}

      {/* Ïã†Í≥† Î™®Îã¨ */}
      {props.showReportModal && (
        <S.ReportModalOverlay onClick={props.onCloseReportModal}>
          <S.ReportModalContent onClick={(e) => e.stopPropagation()}>
            <S.ReportModalTitle>ÎåìÍ∏Ä Ïã†Í≥†</S.ReportModalTitle>
            <S.ReportModalText>
              Ïã†Í≥† ÏÇ¨Ïú†Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî. Ïã†Í≥†Îêú ÎåìÍ∏ÄÏùÄ Í≤ÄÌÜ† ÌõÑ Ï≤òÎ¶¨Îê©ÎãàÎã§.
            </S.ReportModalText>
            <S.ReportReasonSelect
              value={props.selectedReportReason}
              onChange={props.onReportReasonChange}
            >
              <option value="">Ïã†Í≥† ÏÇ¨Ïú†Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
              <option value="ÏöïÏÑ§">ÏöïÏÑ§</option>
              <option value="Í¥ëÍ≥†">Í¥ëÍ≥†</option>
              <option value="ÎèÑÎ∞∞">ÎèÑÎ∞∞</option>
              <option value="Î∂ÄÏ†ÅÏ†àÌïú ÏÇ¨ÏßÑ">Î∂ÄÏ†ÅÏ†àÌïú ÏÇ¨ÏßÑ</option>
              <option value="Í∏∞ÌÉÄ">Í∏∞ÌÉÄ</option>
            </S.ReportReasonSelect>
            <S.ReportModalButtonGroup>
              <S.ReportModalButton onClick={props.onCloseReportModal}>
                Ï∑®ÏÜå
              </S.ReportModalButton>
              <S.ReportModalButton 
                $primary 
                onClick={props.onSubmitReport}
                disabled={!props.selectedReportReason}
              >
                Ïã†Í≥†ÌïòÍ∏∞
              </S.ReportModalButton>
            </S.ReportModalButtonGroup>
          </S.ReportModalContent>
        </S.ReportModalOverlay>
      )}
    </>
  );
};

export default FreeBoardCommentPresenter;